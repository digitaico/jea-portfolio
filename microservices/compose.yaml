services:
  
  db_1:
    image: public.ecr.aws/docker/library/postgres:17-alpine
    shm_size: 128mb
    restart: always
    ports:
      - "5433:5432" # PostgreSQL port
    container_name: db_1
    environment:
      POSTGRES_USER : user
      POSTGRES_PASSWORD : password
      POSTGRES_DB : orders_db
    volumes:
      - orders_data:/var/lib/postgresql/data
    networks:
      - microservices-net 
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s

  nats:
    image: public.ecr.aws/docker/library/nats:2.9.20-alpine
    container_name: nats-server
    ports:
      - "4222:4222" # nats client port
      - "8222:8222" # nats monitoring port 
    command: -DV -js
    networks:
      - microservices-net

  notifications:
    build: 
      context: ./notifications
      dockerfile: Dockerfile
    container_name: notifications
    environment:
      NATS_URL : nats://nats-server:4222
    depends_on:
      - nats
    networks:
      - microservices-net
    command: uvicorn main:app --host 0.0.0.0 --port 8003

  api-gateway:
    build: 
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    container_name: api-gateway
    expose:
      - "8000"
    networks:
      - microservices-net

  products:
    build: 
      context: ./products
      dockerfile: Dockerfile
    container_name: products
    volumes:
      - ./products:/app
    networks:
      - microservices-net

  orders:
    build: 
      context: ./orders
      dockerfile: Dockerfile
    container_name: orders
    environment:
      DATABASE_URL : postgresql://user:password@db_1:5432/orders_db
    depends_on:
      - db_1
    networks:
      - microservices-net
    command: uvicorn main:app --host 0.0.0.0 --port 8001


networks:
  microservices-net:
    driver: bridge

volumes:
  orders_data:
